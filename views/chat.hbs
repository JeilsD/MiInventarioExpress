<h2>{{title}}</h2>
<p>Habla en tiempo real con otros administradores conectados.</p>

<div style="border: 1px solid #ccc; height: 400px; overflow-y: scroll; padding: 10px; margin-bottom: 10px;" id="chat-window">
    </div>

<form id="chat-form">
    <input 
        type="text" 
        id="message-input" 
        placeholder="Escribe tu mensaje..." 
        autocomplete="off"
        style="width: 80%; padding: 8px;"
    >
    <button type: "submit" style="padding: 8px;">Enviar</button>
</form>

<script src="/socket.io/socket.io.js"></script>

<script>
    // Conectamos el cliente al servidor de Socket.io
    const socket = io();

    // Obtenemos los elementos del DOM
    const chatWindow = document.getElementById('chat-window');
    const chatForm = document.getElementById('chat-form');
    const messageInput = document.getElementById('message-input');

    // Función para añadir un mensaje a la ventana
    function appendMessage(user, message) {
        const messageElement = document.createElement('div');
        
        let formattedMessage = '';
        if (user === 'Sistema') {
            // Mensajes del sistema en itálica
            formattedMessage = `<i><strong>${user}:</strong> ${message}</i>`;
        } else {
            // Mensajes de usuario
            formattedMessage = `<strong>${user}:</strong> ${message}`;
        }

        messageElement.innerHTML = formattedMessage;
        chatWindow.appendChild(messageElement);
        
        // Auto-scroll al fondo
        chatWindow.scrollTop = chatWindow.scrollHeight;
    }

    // --- ENVIAR MENSAJES (Cliente -> Servidor) ---
    chatForm.addEventListener('submit', (e) => {
        e.preventDefault(); // Evita que la página se recargue
        
        const message = messageInput.value.trim();
        
        if (message) {
            // 1. Enviamos el mensaje al servidor
            socket.emit('chatMessage', message);
            
            // 2. Limpiamos el input
            messageInput.value = '';
        }
    });

    // --- RECIBIR MENSAJES (Servidor -> Cliente) ---
    // Escuchamos el evento 'chatMessage' que definimos en app.js
    socket.on('chatMessage', (data) => {
        // 'data' es el objeto { user: '...', message: '...' }
        appendMessage(data.user, data.message);
    });

    // Manejar errores de conexión (ej. si la sesión falla)
    socket.on('connect_error', (err) => {
        console.error('Error de conexión de Socket.io:', err.message);
        appendMessage('Sistema', 'Error de conexión. No puedes unirte al chat.');
    });

</script>